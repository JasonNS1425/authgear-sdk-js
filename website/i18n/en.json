{
  "_comment": "This file is auto-generated by write-translations.js",
  "localized-strings": {
    "next": "Next",
    "previous": "Previous",
    "tagline": "Documentation site for Skygear SDK JS",
    "docs": {
      "index": {
        "title": "Index"
      },
      "node.authcontainer._constructor_": {
        "title": "AuthContainer.(constructor)"
      },
      "node.authcontainer.accesstoken": {
        "title": "AuthContainer.accessToken property"
      },
      "node.authcontainer.changepassword": {
        "title": "AuthContainer.changePassword() method"
      },
      "node.authcontainer.currentidentity": {
        "title": "AuthContainer.currentIdentity property"
      },
      "node.authcontainer.currentuser": {
        "title": "AuthContainer.currentUser property"
      },
      "node.authcontainer.deleteoauthprovider": {
        "title": "AuthContainer.deleteOAuthProvider() method"
      },
      "node.authcontainer.linkoauthproviderwithaccesstoken": {
        "title": "AuthContainer.linkOAuthProviderWithAccessToken() method"
      },
      "node.authcontainer.login": {
        "title": "AuthContainer.login() method"
      },
      "node.authcontainer.loginoauthproviderwithaccesstoken": {
        "title": "AuthContainer.loginOAuthProviderWithAccessToken() method"
      },
      "node.authcontainer.loginwithcustomtoken": {
        "title": "AuthContainer.loginWithCustomToken() method"
      },
      "node.authcontainer.logout": {
        "title": "AuthContainer.logout() method"
      },
      "node.authcontainer": {
        "title": "AuthContainer class"
      },
      "node.authcontainer.me": {
        "title": "AuthContainer.me() method"
      },
      "node.authcontainer.parent": {
        "title": "AuthContainer.parent property"
      },
      "node.authcontainer.persistresponse": {
        "title": "AuthContainer.persistResponse() method"
      },
      "node.authcontainer.requestemailverification": {
        "title": "AuthContainer.requestEmailVerification() method"
      },
      "node.authcontainer.requestforgotpasswordemail": {
        "title": "AuthContainer.requestForgotPasswordEmail() method"
      },
      "node.authcontainer.resetpassword": {
        "title": "AuthContainer.resetPassword() method"
      },
      "node.authcontainer.signup": {
        "title": "AuthContainer.signup() method"
      },
      "node.authcontainer.signupwithemail": {
        "title": "AuthContainer.signupWithEmail() method"
      },
      "node.authcontainer.signupwithusername": {
        "title": "AuthContainer.signupWithUsername() method"
      },
      "node.authcontainer.updatemetadata": {
        "title": "AuthContainer.updateMetadata() method"
      },
      "node.authcontainer.verifywithcode": {
        "title": "AuthContainer.verifyWithCode() method"
      },
      "node.authresponse.accesstoken": {
        "title": "AuthResponse.accessToken property"
      },
      "node.authresponse.identity": {
        "title": "AuthResponse.identity property"
      },
      "node.authresponse": {
        "title": "AuthResponse interface"
      },
      "node.authresponse.user": {
        "title": "AuthResponse.user property"
      },
      "node.baseapiclient._constructor_": {
        "title": "BaseAPIClient.(constructor)"
      },
      "node.baseapiclient.accesstoken": {
        "title": "BaseAPIClient.accessToken property"
      },
      "node.baseapiclient.apikey": {
        "title": "BaseAPIClient.apiKey property"
      },
      "node.baseapiclient.changepassword": {
        "title": "BaseAPIClient.changePassword() method"
      },
      "node.baseapiclient.deleteoauthprovider": {
        "title": "BaseAPIClient.deleteOAuthProvider() method"
      },
      "node.baseapiclient.endpoint": {
        "title": "BaseAPIClient.endpoint property"
      },
      "node.baseapiclient.fetch": {
        "title": "BaseAPIClient.fetch() method"
      },
      "node.baseapiclient.linkoauthproviderwithaccesstoken": {
        "title": "BaseAPIClient.linkOAuthProviderWithAccessToken() method"
      },
      "node.baseapiclient.login": {
        "title": "BaseAPIClient.login() method"
      },
      "node.baseapiclient.loginoauthproviderwithaccesstoken": {
        "title": "BaseAPIClient.loginOAuthProviderWithAccessToken() method"
      },
      "node.baseapiclient.loginwithcustomtoken": {
        "title": "BaseAPIClient.loginWithCustomToken() method"
      },
      "node.baseapiclient.logout": {
        "title": "BaseAPIClient.logout() method"
      },
      "node.baseapiclient": {
        "title": "BaseAPIClient class"
      },
      "node.baseapiclient.me": {
        "title": "BaseAPIClient.me() method"
      },
      "node.baseapiclient.post": {
        "title": "BaseAPIClient.post() method"
      },
      "node.baseapiclient.postandreturnauthresponse": {
        "title": "BaseAPIClient.postAndReturnAuthResponse() method"
      },
      "node.baseapiclient.requestemailverification": {
        "title": "BaseAPIClient.requestEmailVerification() method"
      },
      "node.baseapiclient.requestforgotpasswordemail": {
        "title": "BaseAPIClient.requestForgotPasswordEmail() method"
      },
      "node.baseapiclient.resetpassword": {
        "title": "BaseAPIClient.resetPassword() method"
      },
      "node.baseapiclient.signup": {
        "title": "BaseAPIClient.signup() method"
      },
      "node.baseapiclient.updatemetadata": {
        "title": "BaseAPIClient.updateMetadata() method"
      },
      "node.baseapiclient.verifywithcode": {
        "title": "BaseAPIClient.verifyWithCode() method"
      },
      "node.container._constructor_": {
        "title": "Container.(constructor)"
      },
      "node.container.apiclient": {
        "title": "Container.apiClient property"
      },
      "node.container.auth": {
        "title": "Container.auth property"
      },
      "node.container.configure": {
        "title": "Container.configure() method"
      },
      "node.container": {
        "title": "Container class"
      },
      "node.container.name": {
        "title": "Container.name property"
      },
      "node.container.storage": {
        "title": "Container.storage property"
      },
      "node.containerstorage._constructor_": {
        "title": "ContainerStorage.(constructor)"
      },
      "node.containerstorage.driver": {
        "title": "ContainerStorage.driver property"
      },
      "node.containerstorage": {
        "title": "ContainerStorage class"
      },
      "node.containerstorage.safedel": {
        "title": "ContainerStorage.safeDel() method"
      },
      "node.containerstorage.safeget": {
        "title": "ContainerStorage.safeGet() method"
      },
      "node.containerstorage.safegetjson": {
        "title": "ContainerStorage.safeGetJSON() method"
      },
      "node.containerstorage.safeset": {
        "title": "ContainerStorage.safeSet() method"
      },
      "node.containerstorage.safesetjson": {
        "title": "ContainerStorage.safeSetJSON() method"
      },
      "node.customtokenidentity.claims": {
        "title": "CustomTokenIdentity.claims property"
      },
      "node.customtokenidentity.id": {
        "title": "CustomTokenIdentity.id property"
      },
      "node.customtokenidentity": {
        "title": "CustomTokenIdentity interface"
      },
      "node.customtokenidentity.provideruserid": {
        "title": "CustomTokenIdentity.providerUserID property"
      },
      "node.customtokenidentity.rawprofile": {
        "title": "CustomTokenIdentity.rawProfile property"
      },
      "node.customtokenidentity.type": {
        "title": "CustomTokenIdentity.type property"
      },
      "node.decodeauthresponse": {
        "title": "decodeAuthResponse() function"
      },
      "node.decodeerror": {
        "title": "decodeError() function"
      },
      "node.decodeidentity": {
        "title": "decodeIdentity() function"
      },
      "node.decodeuser": {
        "title": "decodeUser() function"
      },
      "node.defaultcontainer": {
        "title": "defaultContainer variable"
      },
      "node.encodeidentity": {
        "title": "encodeIdentity() function"
      },
      "node.encodeuser": {
        "title": "encodeUser() function"
      },
      "node.identity": {
        "title": "Identity type"
      },
      "node.jsonarray": {
        "title": "JSONArray interface"
      },
      "node.jsonobject": {
        "title": "JSONObject interface"
      },
      "node.jsonvalue": {
        "title": "JSONValue type"
      },
      "node": {
        "title": "node package"
      },
      "node.memorystoragedriver._constructor_": {
        "title": "MemoryStorageDriver.(constructor)"
      },
      "node.memorystoragedriver.backingstore": {
        "title": "MemoryStorageDriver.backingStore property"
      },
      "node.memorystoragedriver.del": {
        "title": "MemoryStorageDriver.del() method"
      },
      "node.memorystoragedriver.get": {
        "title": "MemoryStorageDriver.get() method"
      },
      "node.memorystoragedriver": {
        "title": "MemoryStorageDriver class"
      },
      "node.memorystoragedriver.set": {
        "title": "MemoryStorageDriver.set() method"
      },
      "node.nodeapiclient.fetch": {
        "title": "NodeAPIClient.fetch() method"
      },
      "node.nodeapiclient": {
        "title": "NodeAPIClient class"
      },
      "node.oauthidentity.claims": {
        "title": "OAuthIdentity.claims property"
      },
      "node.oauthidentity.id": {
        "title": "OAuthIdentity.id property"
      },
      "node.oauthidentity": {
        "title": "OAuthIdentity interface"
      },
      "node.oauthidentity.providertype": {
        "title": "OAuthIdentity.providerType property"
      },
      "node.oauthidentity.provideruserid": {
        "title": "OAuthIdentity.providerUserID property"
      },
      "node.oauthidentity.rawprofile": {
        "title": "OAuthIdentity.rawProfile property"
      },
      "node.oauthidentity.type": {
        "title": "OAuthIdentity.type property"
      },
      "node.passwordidentity.claims": {
        "title": "PasswordIdentity.claims property"
      },
      "node.passwordidentity.id": {
        "title": "PasswordIdentity.id property"
      },
      "node.passwordidentity.loginid": {
        "title": "PasswordIdentity.loginID property"
      },
      "node.passwordidentity.loginidkey": {
        "title": "PasswordIdentity.loginIDKey property"
      },
      "node.passwordidentity": {
        "title": "PasswordIdentity interface"
      },
      "node.passwordidentity.realm": {
        "title": "PasswordIdentity.realm property"
      },
      "node.passwordidentity.type": {
        "title": "PasswordIdentity.type property"
      },
      "node.skygearerror._constructor_": {
        "title": "SkygearError.(constructor)"
      },
      "node.skygearerror.code": {
        "title": "SkygearError.code property"
      },
      "node.skygearerror.info": {
        "title": "SkygearError.info property"
      },
      "node.skygearerror": {
        "title": "SkygearError class"
      },
      "node.skygearerror.name": {
        "title": "SkygearError.name property"
      },
      "node.skygearerrorcode": {
        "title": "SkygearErrorCode type"
      },
      "node.skygearerrorcodeaccesskeynotaccepted": {
        "title": "SkygearErrorCodeAccessKeyNotAccepted variable"
      },
      "node.skygearerrorcodeaccesstokennotaccepted": {
        "title": "SkygearErrorCodeAccessTokenNotAccepted variable"
      },
      "node.skygearerrorcodeassetsizetoolarge": {
        "title": "SkygearErrorCodeAssetSizeTooLarge variable"
      },
      "node.skygearerrorcodeatomicoperationfailure": {
        "title": "SkygearErrorCodeAtomicOperationFailure variable"
      },
      "node.skygearerrorcodebadrequest": {
        "title": "SkygearErrorCodeBadRequest variable"
      },
      "node.skygearerrorcodeconstraintviolated": {
        "title": "SkygearErrorCodeConstraintViolated variable"
      },
      "node.skygearerrorcodedeniedargument": {
        "title": "SkygearErrorCodeDeniedArgument variable"
      },
      "node.skygearerrorcodeduplicated": {
        "title": "SkygearErrorCodeDuplicated variable"
      },
      "node.skygearerrorcodehooktimeout": {
        "title": "SkygearErrorCodeHookTimeOut variable"
      },
      "node.skygearerrorcodeincompatibleschema": {
        "title": "SkygearErrorCodeIncompatibleSchema variable"
      },
      "node.skygearerrorcodeinvalidargument": {
        "title": "SkygearErrorCodeInvalidArgument variable"
      },
      "node.skygearerrorcodeinvalidcredentials": {
        "title": "SkygearErrorCodeInvalidCredentials variable"
      },
      "node.skygearerrorcodeinvalidsignature": {
        "title": "SkygearErrorCodeInvalidSignature variable"
      },
      "node.skygearerrorcodenotauthenticated": {
        "title": "SkygearErrorCodeNotAuthenticated variable"
      },
      "node.skygearerrorcodenotconfigured": {
        "title": "SkygearErrorCodeNotConfigured variable"
      },
      "node.skygearerrorcodenotimplemented": {
        "title": "SkygearErrorCodeNotImplemented variable"
      },
      "node.skygearerrorcodenotsupported": {
        "title": "SkygearErrorCodeNotSupported variable"
      },
      "node.skygearerrorcodepartialoperationfailure": {
        "title": "SkygearErrorCodePartialOperationFailure variable"
      },
      "node.skygearerrorcodepasswordpolicyviolated": {
        "title": "SkygearErrorCodePasswordPolicyViolated variable"
      },
      "node.skygearerrorcodepermissiondenied": {
        "title": "SkygearErrorCodePermissionDenied variable"
      },
      "node.skygearerrorcodeplugininitializing": {
        "title": "SkygearErrorCodePluginInitializing variable"
      },
      "node.skygearerrorcodeplugintimeout": {
        "title": "SkygearErrorCodePluginTimeout variable"
      },
      "node.skygearerrorcodepluginunavailable": {
        "title": "SkygearErrorCodePluginUnavailable variable"
      },
      "node.skygearerrorcoderecordquerydenied": {
        "title": "SkygearErrorCodeRecordQueryDenied variable"
      },
      "node.skygearerrorcoderecordqueryinvalid": {
        "title": "SkygearErrorCodeRecordQueryInvalid variable"
      },
      "node.skygearerrorcoderesourcenotfound": {
        "title": "SkygearErrorCodeResourceNotFound variable"
      },
      "node.skygearerrorcoderesponsetimeout": {
        "title": "SkygearErrorCodeResponseTimeout variable"
      },
      "node.skygearerrorcodeundefinedoperation": {
        "title": "SkygearErrorCodeUndefinedOperation variable"
      },
      "node.skygearerrorcodeunexpectedauthinfonotfound": {
        "title": "SkygearErrorCodeUnexpectedAuthInfoNotFound variable"
      },
      "node.skygearerrorcodeunexpectederror": {
        "title": "SkygearErrorCodeUnexpectedError variable"
      },
      "node.skygearerrorcodeunexpectedunabletoopendatabase": {
        "title": "SkygearErrorCodeUnexpectedUnableToOpenDatabase variable"
      },
      "node.skygearerrorcodeunexpectedusernotfound": {
        "title": "SkygearErrorCodeUnexpectedUserNotFound variable"
      },
      "node.skygearerrorcodeuserdisabled": {
        "title": "SkygearErrorCodeUserDisabled variable"
      },
      "node.skygearerrorcodeverificationrequired": {
        "title": "SkygearErrorCodeVerificationRequired variable"
      },
      "node.ssologinoptions": {
        "title": "SSOLoginOptions interface"
      },
      "node.ssologinoptions.mergerealm": {
        "title": "SSOLoginOptions.mergeRealm property"
      },
      "node.ssologinoptions.onuserduplicate": {
        "title": "SSOLoginOptions.onUserDuplicate property"
      },
      "node.storagedriver.del": {
        "title": "StorageDriver.del() method"
      },
      "node.storagedriver.get": {
        "title": "StorageDriver.get() method"
      },
      "node.storagedriver": {
        "title": "StorageDriver interface"
      },
      "node.storagedriver.set": {
        "title": "StorageDriver.set() method"
      },
      "node.user.createdat": {
        "title": "User.createdAt property"
      },
      "node.user.id": {
        "title": "User.id property"
      },
      "node.user.isdisabled": {
        "title": "User.isDisabled property"
      },
      "node.user.isverified": {
        "title": "User.isVerified property"
      },
      "node.user.lastloginat": {
        "title": "User.lastLoginAt property"
      },
      "node.user": {
        "title": "User interface"
      },
      "node.user.metadata": {
        "title": "User.metadata property"
      },
      "web.authcontainer._constructor_": {
        "title": "AuthContainer.(constructor)"
      },
      "web.authcontainer.accesstoken": {
        "title": "AuthContainer.accessToken property"
      },
      "web.authcontainer.changepassword": {
        "title": "AuthContainer.changePassword() method"
      },
      "web.authcontainer.currentidentity": {
        "title": "AuthContainer.currentIdentity property"
      },
      "web.authcontainer.currentuser": {
        "title": "AuthContainer.currentUser property"
      },
      "web.authcontainer.deleteoauthprovider": {
        "title": "AuthContainer.deleteOAuthProvider() method"
      },
      "web.authcontainer.linkoauthproviderwithaccesstoken": {
        "title": "AuthContainer.linkOAuthProviderWithAccessToken() method"
      },
      "web.authcontainer.login": {
        "title": "AuthContainer.login() method"
      },
      "web.authcontainer.loginoauthproviderwithaccesstoken": {
        "title": "AuthContainer.loginOAuthProviderWithAccessToken() method"
      },
      "web.authcontainer.loginwithcustomtoken": {
        "title": "AuthContainer.loginWithCustomToken() method"
      },
      "web.authcontainer.logout": {
        "title": "AuthContainer.logout() method"
      },
      "web.authcontainer": {
        "title": "AuthContainer class"
      },
      "web.authcontainer.me": {
        "title": "AuthContainer.me() method"
      },
      "web.authcontainer.parent": {
        "title": "AuthContainer.parent property"
      },
      "web.authcontainer.persistresponse": {
        "title": "AuthContainer.persistResponse() method"
      },
      "web.authcontainer.requestemailverification": {
        "title": "AuthContainer.requestEmailVerification() method"
      },
      "web.authcontainer.requestforgotpasswordemail": {
        "title": "AuthContainer.requestForgotPasswordEmail() method"
      },
      "web.authcontainer.resetpassword": {
        "title": "AuthContainer.resetPassword() method"
      },
      "web.authcontainer.signup": {
        "title": "AuthContainer.signup() method"
      },
      "web.authcontainer.signupwithemail": {
        "title": "AuthContainer.signupWithEmail() method"
      },
      "web.authcontainer.signupwithusername": {
        "title": "AuthContainer.signupWithUsername() method"
      },
      "web.authcontainer.updatemetadata": {
        "title": "AuthContainer.updateMetadata() method"
      },
      "web.authcontainer.verifywithcode": {
        "title": "AuthContainer.verifyWithCode() method"
      },
      "web.authresponse.accesstoken": {
        "title": "AuthResponse.accessToken property"
      },
      "web.authresponse.identity": {
        "title": "AuthResponse.identity property"
      },
      "web.authresponse": {
        "title": "AuthResponse interface"
      },
      "web.authresponse.user": {
        "title": "AuthResponse.user property"
      },
      "web.baseapiclient._constructor_": {
        "title": "BaseAPIClient.(constructor)"
      },
      "web.baseapiclient.accesstoken": {
        "title": "BaseAPIClient.accessToken property"
      },
      "web.baseapiclient.apikey": {
        "title": "BaseAPIClient.apiKey property"
      },
      "web.baseapiclient.changepassword": {
        "title": "BaseAPIClient.changePassword() method"
      },
      "web.baseapiclient.deleteoauthprovider": {
        "title": "BaseAPIClient.deleteOAuthProvider() method"
      },
      "web.baseapiclient.endpoint": {
        "title": "BaseAPIClient.endpoint property"
      },
      "web.baseapiclient.fetch": {
        "title": "BaseAPIClient.fetch() method"
      },
      "web.baseapiclient.linkoauthproviderwithaccesstoken": {
        "title": "BaseAPIClient.linkOAuthProviderWithAccessToken() method"
      },
      "web.baseapiclient.login": {
        "title": "BaseAPIClient.login() method"
      },
      "web.baseapiclient.loginoauthproviderwithaccesstoken": {
        "title": "BaseAPIClient.loginOAuthProviderWithAccessToken() method"
      },
      "web.baseapiclient.loginwithcustomtoken": {
        "title": "BaseAPIClient.loginWithCustomToken() method"
      },
      "web.baseapiclient.logout": {
        "title": "BaseAPIClient.logout() method"
      },
      "web.baseapiclient": {
        "title": "BaseAPIClient class"
      },
      "web.baseapiclient.me": {
        "title": "BaseAPIClient.me() method"
      },
      "web.baseapiclient.post": {
        "title": "BaseAPIClient.post() method"
      },
      "web.baseapiclient.postandreturnauthresponse": {
        "title": "BaseAPIClient.postAndReturnAuthResponse() method"
      },
      "web.baseapiclient.requestemailverification": {
        "title": "BaseAPIClient.requestEmailVerification() method"
      },
      "web.baseapiclient.requestforgotpasswordemail": {
        "title": "BaseAPIClient.requestForgotPasswordEmail() method"
      },
      "web.baseapiclient.resetpassword": {
        "title": "BaseAPIClient.resetPassword() method"
      },
      "web.baseapiclient.signup": {
        "title": "BaseAPIClient.signup() method"
      },
      "web.baseapiclient.updatemetadata": {
        "title": "BaseAPIClient.updateMetadata() method"
      },
      "web.baseapiclient.verifywithcode": {
        "title": "BaseAPIClient.verifyWithCode() method"
      },
      "web.container._constructor_": {
        "title": "Container.(constructor)"
      },
      "web.container.apiclient": {
        "title": "Container.apiClient property"
      },
      "web.container.auth": {
        "title": "Container.auth property"
      },
      "web.container.configure": {
        "title": "Container.configure() method"
      },
      "web.container": {
        "title": "Container class"
      },
      "web.container.name": {
        "title": "Container.name property"
      },
      "web.container.storage": {
        "title": "Container.storage property"
      },
      "web.containerstorage._constructor_": {
        "title": "ContainerStorage.(constructor)"
      },
      "web.containerstorage.driver": {
        "title": "ContainerStorage.driver property"
      },
      "web.containerstorage": {
        "title": "ContainerStorage class"
      },
      "web.containerstorage.safedel": {
        "title": "ContainerStorage.safeDel() method"
      },
      "web.containerstorage.safeget": {
        "title": "ContainerStorage.safeGet() method"
      },
      "web.containerstorage.safegetjson": {
        "title": "ContainerStorage.safeGetJSON() method"
      },
      "web.containerstorage.safeset": {
        "title": "ContainerStorage.safeSet() method"
      },
      "web.containerstorage.safesetjson": {
        "title": "ContainerStorage.safeSetJSON() method"
      },
      "web.customtokenidentity.claims": {
        "title": "CustomTokenIdentity.claims property"
      },
      "web.customtokenidentity.id": {
        "title": "CustomTokenIdentity.id property"
      },
      "web.customtokenidentity": {
        "title": "CustomTokenIdentity interface"
      },
      "web.customtokenidentity.provideruserid": {
        "title": "CustomTokenIdentity.providerUserID property"
      },
      "web.customtokenidentity.rawprofile": {
        "title": "CustomTokenIdentity.rawProfile property"
      },
      "web.customtokenidentity.type": {
        "title": "CustomTokenIdentity.type property"
      },
      "web.decodeauthresponse": {
        "title": "decodeAuthResponse() function"
      },
      "web.decodeerror": {
        "title": "decodeError() function"
      },
      "web.decodeidentity": {
        "title": "decodeIdentity() function"
      },
      "web.decodeuser": {
        "title": "decodeUser() function"
      },
      "web.defaultcontainer": {
        "title": "defaultContainer variable"
      },
      "web.encodeidentity": {
        "title": "encodeIdentity() function"
      },
      "web.encodeuser": {
        "title": "encodeUser() function"
      },
      "web.identity": {
        "title": "Identity type"
      },
      "web.jsonarray": {
        "title": "JSONArray interface"
      },
      "web.jsonobject": {
        "title": "JSONObject interface"
      },
      "web.jsonvalue": {
        "title": "JSONValue type"
      },
      "web.localstoragestoragedriver": {
        "title": "localStorageStorageDriver variable"
      },
      "web": {
        "title": "web package"
      },
      "web.oauthauthorizationurloptions.action": {
        "title": "OAuthAuthorizationURLOptions.action property"
      },
      "web.oauthauthorizationurloptions.callbackurl": {
        "title": "OAuthAuthorizationURLOptions.callbackURL property"
      },
      "web.oauthauthorizationurloptions": {
        "title": "OAuthAuthorizationURLOptions interface"
      },
      "web.oauthauthorizationurloptions.uxmode": {
        "title": "OAuthAuthorizationURLOptions.uxMode property"
      },
      "web.oauthidentity.claims": {
        "title": "OAuthIdentity.claims property"
      },
      "web.oauthidentity.id": {
        "title": "OAuthIdentity.id property"
      },
      "web.oauthidentity": {
        "title": "OAuthIdentity interface"
      },
      "web.oauthidentity.providertype": {
        "title": "OAuthIdentity.providerType property"
      },
      "web.oauthidentity.provideruserid": {
        "title": "OAuthIdentity.providerUserID property"
      },
      "web.oauthidentity.rawprofile": {
        "title": "OAuthIdentity.rawProfile property"
      },
      "web.oauthidentity.type": {
        "title": "OAuthIdentity.type property"
      },
      "web.passwordidentity.claims": {
        "title": "PasswordIdentity.claims property"
      },
      "web.passwordidentity.id": {
        "title": "PasswordIdentity.id property"
      },
      "web.passwordidentity.loginid": {
        "title": "PasswordIdentity.loginID property"
      },
      "web.passwordidentity.loginidkey": {
        "title": "PasswordIdentity.loginIDKey property"
      },
      "web.passwordidentity": {
        "title": "PasswordIdentity interface"
      },
      "web.passwordidentity.realm": {
        "title": "PasswordIdentity.realm property"
      },
      "web.passwordidentity.type": {
        "title": "PasswordIdentity.type property"
      },
      "web.skygearerror._constructor_": {
        "title": "SkygearError.(constructor)"
      },
      "web.skygearerror.code": {
        "title": "SkygearError.code property"
      },
      "web.skygearerror.info": {
        "title": "SkygearError.info property"
      },
      "web.skygearerror": {
        "title": "SkygearError class"
      },
      "web.skygearerror.name": {
        "title": "SkygearError.name property"
      },
      "web.skygearerrorcode": {
        "title": "SkygearErrorCode type"
      },
      "web.skygearerrorcodeaccesskeynotaccepted": {
        "title": "SkygearErrorCodeAccessKeyNotAccepted variable"
      },
      "web.skygearerrorcodeaccesstokennotaccepted": {
        "title": "SkygearErrorCodeAccessTokenNotAccepted variable"
      },
      "web.skygearerrorcodeassetsizetoolarge": {
        "title": "SkygearErrorCodeAssetSizeTooLarge variable"
      },
      "web.skygearerrorcodeatomicoperationfailure": {
        "title": "SkygearErrorCodeAtomicOperationFailure variable"
      },
      "web.skygearerrorcodebadrequest": {
        "title": "SkygearErrorCodeBadRequest variable"
      },
      "web.skygearerrorcodeconstraintviolated": {
        "title": "SkygearErrorCodeConstraintViolated variable"
      },
      "web.skygearerrorcodedeniedargument": {
        "title": "SkygearErrorCodeDeniedArgument variable"
      },
      "web.skygearerrorcodeduplicated": {
        "title": "SkygearErrorCodeDuplicated variable"
      },
      "web.skygearerrorcodehooktimeout": {
        "title": "SkygearErrorCodeHookTimeOut variable"
      },
      "web.skygearerrorcodeincompatibleschema": {
        "title": "SkygearErrorCodeIncompatibleSchema variable"
      },
      "web.skygearerrorcodeinvalidargument": {
        "title": "SkygearErrorCodeInvalidArgument variable"
      },
      "web.skygearerrorcodeinvalidcredentials": {
        "title": "SkygearErrorCodeInvalidCredentials variable"
      },
      "web.skygearerrorcodeinvalidsignature": {
        "title": "SkygearErrorCodeInvalidSignature variable"
      },
      "web.skygearerrorcodenotauthenticated": {
        "title": "SkygearErrorCodeNotAuthenticated variable"
      },
      "web.skygearerrorcodenotconfigured": {
        "title": "SkygearErrorCodeNotConfigured variable"
      },
      "web.skygearerrorcodenotimplemented": {
        "title": "SkygearErrorCodeNotImplemented variable"
      },
      "web.skygearerrorcodenotsupported": {
        "title": "SkygearErrorCodeNotSupported variable"
      },
      "web.skygearerrorcodepartialoperationfailure": {
        "title": "SkygearErrorCodePartialOperationFailure variable"
      },
      "web.skygearerrorcodepasswordpolicyviolated": {
        "title": "SkygearErrorCodePasswordPolicyViolated variable"
      },
      "web.skygearerrorcodepermissiondenied": {
        "title": "SkygearErrorCodePermissionDenied variable"
      },
      "web.skygearerrorcodeplugininitializing": {
        "title": "SkygearErrorCodePluginInitializing variable"
      },
      "web.skygearerrorcodeplugintimeout": {
        "title": "SkygearErrorCodePluginTimeout variable"
      },
      "web.skygearerrorcodepluginunavailable": {
        "title": "SkygearErrorCodePluginUnavailable variable"
      },
      "web.skygearerrorcoderecordquerydenied": {
        "title": "SkygearErrorCodeRecordQueryDenied variable"
      },
      "web.skygearerrorcoderecordqueryinvalid": {
        "title": "SkygearErrorCodeRecordQueryInvalid variable"
      },
      "web.skygearerrorcoderesourcenotfound": {
        "title": "SkygearErrorCodeResourceNotFound variable"
      },
      "web.skygearerrorcoderesponsetimeout": {
        "title": "SkygearErrorCodeResponseTimeout variable"
      },
      "web.skygearerrorcodeundefinedoperation": {
        "title": "SkygearErrorCodeUndefinedOperation variable"
      },
      "web.skygearerrorcodeunexpectedauthinfonotfound": {
        "title": "SkygearErrorCodeUnexpectedAuthInfoNotFound variable"
      },
      "web.skygearerrorcodeunexpectederror": {
        "title": "SkygearErrorCodeUnexpectedError variable"
      },
      "web.skygearerrorcodeunexpectedunabletoopendatabase": {
        "title": "SkygearErrorCodeUnexpectedUnableToOpenDatabase variable"
      },
      "web.skygearerrorcodeunexpectedusernotfound": {
        "title": "SkygearErrorCodeUnexpectedUserNotFound variable"
      },
      "web.skygearerrorcodeuserdisabled": {
        "title": "SkygearErrorCodeUserDisabled variable"
      },
      "web.skygearerrorcodeverificationrequired": {
        "title": "SkygearErrorCodeVerificationRequired variable"
      },
      "web.ssologinoptions": {
        "title": "SSOLoginOptions interface"
      },
      "web.ssologinoptions.mergerealm": {
        "title": "SSOLoginOptions.mergeRealm property"
      },
      "web.ssologinoptions.onuserduplicate": {
        "title": "SSOLoginOptions.onUserDuplicate property"
      },
      "web.storagedriver.del": {
        "title": "StorageDriver.del() method"
      },
      "web.storagedriver.get": {
        "title": "StorageDriver.get() method"
      },
      "web.storagedriver": {
        "title": "StorageDriver interface"
      },
      "web.storagedriver.set": {
        "title": "StorageDriver.set() method"
      },
      "web.user.createdat": {
        "title": "User.createdAt property"
      },
      "web.user.id": {
        "title": "User.id property"
      },
      "web.user.isdisabled": {
        "title": "User.isDisabled property"
      },
      "web.user.isverified": {
        "title": "User.isVerified property"
      },
      "web.user.lastloginat": {
        "title": "User.lastLoginAt property"
      },
      "web.user": {
        "title": "User interface"
      },
      "web.user.metadata": {
        "title": "User.metadata property"
      },
      "web.webapiclient.fetch": {
        "title": "WebAPIClient.fetch() method"
      },
      "web.webapiclient": {
        "title": "WebAPIClient class"
      },
      "web.webapiclient.oauthauthorizationurl": {
        "title": "WebAPIClient.oauthAuthorizationURL() method"
      },
      "web.webauthcontainer._constructor_": {
        "title": "WebAuthContainer.(constructor)"
      },
      "web.webauthcontainer.getlinkredirectresult": {
        "title": "WebAuthContainer.getLinkRedirectResult() method"
      },
      "web.webauthcontainer.getloginredirectresult": {
        "title": "WebAuthContainer.getLoginRedirectResult() method"
      },
      "web.webauthcontainer.linkoauthproviderwithpopup": {
        "title": "WebAuthContainer.linkOAuthProviderWithPopup() method"
      },
      "web.webauthcontainer.linkoauthproviderwithredirect": {
        "title": "WebAuthContainer.linkOAuthProviderWithRedirect() method"
      },
      "web.webauthcontainer.loginoauthproviderwithpopup": {
        "title": "WebAuthContainer.loginOAuthProviderWithPopup() method"
      },
      "web.webauthcontainer.loginoauthproviderwithredirect": {
        "title": "WebAuthContainer.loginOAuthProviderWithRedirect() method"
      },
      "web.webauthcontainer": {
        "title": "WebAuthContainer class"
      },
      "web.webcontainer._constructor_": {
        "title": "WebContainer.(constructor)"
      },
      "web.webcontainer.auth": {
        "title": "WebContainer.auth property"
      },
      "web.webcontainer": {
        "title": "WebContainer class"
      }
    },
    "links": {
      "API Reference": "API Reference"
    },
    "categories": {
      "Docusaurus": "Docusaurus",
      "First Category": "First Category",
      "Second Category": "Second Category"
    }
  },
  "pages-strings": {
    "Help Translate|recruit community translators for your project": "Help Translate",
    "Edit this Doc|recruitment message asking to edit the doc source": "Edit",
    "Translate this Doc|recruitment message asking to translate the docs": "Translate"
  }
}
